import cv2

imgToProcess=r'C:\Users\ofekr\OneDrive\Documents\Vehicle-Tracking-System-Exercise\srcJS\Images\image.jpg'
pathToSave = r'C:\Users\ofekr\OneDrive\Documents\Vehicle-Tracking-System-Exercise\srcJS\Images'

def containsRed(img):
    img_hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
    mask1 = cv2.inRange(img_hsv, (0, 50, 20), (5, 255, 255))
    mask2 = cv2.inRange(img_hsv, (180, 16, 20), (180, 255, 255))
    mask = cv2.bitwise_or(mask1, mask2)
    return cv2.countNonZero(mask) > 0


def calcCorners(approx):
    p1 = approx[0][0]
    p2 = approx[1][0]
    p3 = approx[2][0]
    p4 = approx[3][0]

    x1 = p1[0]
    y1 = p1[1]
    x2 = p2[0]
    y2 = p2[1]
    x3 = p3[0]
    y3 = p3[1]
    x4 = p4[0]
    y4 = p4[1]
    top_left_x = min([x1, x2, x3, x4])
    top_left_y = min([y1, y2, y3, y4])
    bot_right_x = max([x1, x2, x3, x4])
    bot_right_y = max([y1, y2, y3, y4])

    return [top_left_x,top_left_y,bot_right_x,bot_right_y]

def extractRects(imgPath):
    img = cv2.imread(imgPath)
    roi = img
    gray = cv2.cvtColor(roi, cv2.COLOR_BGR2GRAY)  # convert roi into gray
    Blur = cv2.GaussianBlur(gray, (5, 5), 1)  # apply blur to roi
    Canny = cv2.Canny(Blur, 10, 50)  # apply canny to roi

    # Find my contours
    contours = cv2.findContours(Canny, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)[0]

    # Loop through my contours to find rectangles and put them in a list, so i can view them individually later.
    cntrRect = []
    output = ''
    count =0
    for i in contours:
        epsilon = 0.01 * cv2.arcLength(i, True)
        approx = cv2.approxPolyDP(i, epsilon, True)
        if len(approx) == 4:
            corners = calcCorners(approx)
            cropped = img[corners[1]:corners[3], corners[0]:corners[2]]
            name= pathToSave+'\\'+str(count) + '.png'
            if containsRed(cropped):
                width = abs(corners[2]-corners[0])
                height = abs(corners[1]-corners[3])

                if width>=5 and height>=5:
                    cv2.imwrite(name,cropped,[int(cv2.IMWRITE_JPEG_QUALITY), 100])
                    output+=name+","

            cv2.drawContours(roi, cntrRect, -1, (0, 255, 0), 1)
            cntrRect.append(approx)
    print(output)
    cv2.destroyAllWindows()



if __name__ == '__main__':
    extractRects(imgToProcess)
